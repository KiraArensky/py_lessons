# Циклы в Python
"""
Циклы позволяют выполнять код многократно, пока выполняется условие.
В Python есть два основных типа циклов: `for` и `while`.

## 1. Цикл while
Цикл `while` выполняется, пока условие истинно (`True`).
Пример:
"""
x = 0
while x < 5:
    print("Значение x:", x)
    x += 1  # Увеличиваем x на 1

"""
## 2. Цикл for
Цикл `for` используется для перебора элементов последовательности (списков, строк, диапазонов и др.).

Пример перебора списка:
"""
fruits = ["яблоко", "банан", "вишня"]
for fruit in fruits:
    print(fruit)

"""
Пример перебора строки:
"""
for char in "Python":
    print(char)

"""
Пример перебора словаря:
"""
person = {"имя": "Анна", "возраст": 25}
for key, value in person.items():
    print(key, "-", value)

"""
## 3. Функция range()
Функция `range()` используется для создания последовательностей чисел и часто применяется в `for`.

### Основные варианты использования range:
1. `range(n)`: создает последовательность от `0` до `n-1`.
2. `range(start, stop)`: создает последовательность от `start` до `stop-1`.
3. `range(start, stop, step)`: создает последовательность с шагом `step`.

Примеры:
"""
# Перебор чисел от 0 до 4
for i in range(5):
    print(i)

# Перебор чисел от 3 до 7
for i in range(3, 8):
    print(i)

# Перебор четных чисел от 2 до 10
for i in range(2, 11, 2):
    print(i)

# Перебор чисел в обратном порядке от 10 до 1
for i in range(10, 0, -1):
    print(i)

"""
## 4. Использование break и continue
Оператор `break` прерывает выполнение цикла досрочно.
Оператор `continue` пропускает текущую итерацию и переходит к следующей.
Примеры:
"""
# Прерываем цикл при достижении 3
for i in range(5):
    if i == 3:
        break
    print(i)

# Пропускаем число 3
for i in range(5):
    if i == 3:
        continue
    print(i)

"""
## 5. Вложенные циклы
Циклы можно вкладывать друг в друга. Это полезно при работе с двумерными структурами данных.
Пример:
"""
for i in range(3):
    for j in range(2):
        print(f"i={i}, j={j}")

"""
## 6. Перебор разных типов данных с for
### Списки
"""
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    print(num)
"""

### Кортежи
"""
tuple_data = (10, 20, 30)
for value in tuple_data:
    print(value)
"""

### Множества (set)
"""
unique_numbers = {3, 1, 4, 1, 5, 9}
for number in unique_numbers:
    print(number)  # Порядок может быть разным, так как set неупорядочен
"""

### Словари (dict)
"""
info = {"name": "Alice", "age": 30, "city": "New York"}

# Перебор ключей
for key in info:
    print(key)

# Перебор значений
for value in info.values():
    print(value)

# Перебор ключей и значений
for key, value in info.items():
    print(key, "->", value)
"""

Циклы позволяют автоматизировать повторяющиеся операции и упрощают работу с данными.
"""
