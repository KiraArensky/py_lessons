"""
Этот файл содержит примеры работы с переменными и типами данных в Python.
"""

# 1. Числовые типы данных
"""
Python поддерживает несколько типов чисел:
- int (целые числа)
- float (числа с плавающей запятой)
- complex (комплексные числа)
"""
integer_var = 10  # Целое число (int)
float_var = 10.5  # Число с плавающей запятой (float)
complex_var = 2 + 3j  # Комплексное число (complex)

print("Числовые переменные:")
print("integer_var:", integer_var, "тип:", type(integer_var))
print("float_var:", float_var, "тип:", type(float_var))
print("complex_var:", complex_var, "тип:", type(complex_var))
print()

# 2. Строки
"""
Строки (str) в Python используются для хранения текстовых данных.
Они могут быть заключены в одинарные, двойные или тройные кавычки.
"""
string_var = "Привет, мир!"  # Обычная строка
multiline_string = """Это многострочная 
строка в Python."""  # Строка в тройных кавычках

print("Строки:")
print("string_var:", string_var, "тип:", type(string_var))
print("multiline_string:", multiline_string)
print()

# 3. Логический тип
"""
Логические (булевы) значения (bool) могут быть True (истина) или False (ложь).
Они часто используются в условных выражениях и сравнениях.
"""
bool_var1 = True  # Логическое значение (bool)
bool_var2 = False

print("Логические переменные:")
print("bool_var1:", bool_var1, "тип:", type(bool_var1))
print("bool_var2:", bool_var2, "тип:", type(bool_var2))
print()

# 4. Списки (list)
"""
Списки (list) представляют собой упорядоченные изменяемые коллекции элементов.
Они могут содержать элементы разных типов.
"""
list_var = [1, 2, 3, "четыре", 5.5]  # Список с элементами разных типов
list_var.append("новый элемент")  # Добавление нового элемента в список

print("Списки:")
print("list_var:", list_var, "тип:", type(list_var))
print()

# 5. Кортежи (tuple)
"""
Кортежи (tuple) похожи на списки, но они неизменяемые.
После создания их элементы нельзя изменить.
"""
tuple_var = (10, 20, "тридцать", 40.5)
print("Кортежи:")
print("tuple_var:", tuple_var, "тип:", type(tuple_var))
print()

# 6. Множества (set)
"""
Множества (set) представляют собой неупорядоченные коллекции уникальных элементов.
Дубликаты автоматически удаляются.
"""
set_var = {1, 2, 3, 4, 5, 5, 5}  # Дубликаты будут удалены автоматически
print("Множества:")
print("set_var:", set_var, "тип:", type(set_var))
print()

# 7. Словари (dict)
"""
Словари (dict) представляют собой коллекции пар "ключ-значение".
Они позволяют быстро находить значения по ключам.
"""
dict_var = {"ключ1": "значение1", "ключ2": 42, "ключ3": [1, 2, 3]}
print("Словари:")
print("dict_var:", dict_var, "тип:", type(dict_var))
print()

# 8. Специальное значение None
"""
None в Python обозначает отсутствие значения. Это аналог null в других языках программирования.
"""
none_var = None  # Используется для обозначения отсутствия значения
print("NoneType:")
print("none_var:", none_var, "тип:", type(none_var))
